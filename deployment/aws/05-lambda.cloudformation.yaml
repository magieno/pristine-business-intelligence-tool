AWSTemplateFormatVersion: "2010-09-09"
Description: "Lambda Cloudformation Stack."
Resources:
  # <editor-fold desc="Api Gateway">
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref ApiName
      ProtocolType: HTTP
      Target: !Join
        - ''
        - - 'arn:aws:apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt Lambda.Arn
          - '/invocations'

  ApiGatewayLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join
        - ""
        - - "/aws/api-gateway/"
          - !Ref ApiName
      RetentionInDays: 7

  ApiGatewayPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref HttpApi
          - '/*'
  # </editor-fold>

  # <editor-fold desc="Triggers">
  SQSLambdaTrigger:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      EventSourceArn:
        Fn::ImportValue:
          !Sub "${SQSStack}:sqs-queue:arn"
      FunctionName: !Ref Lambda

  FifoSQSLambdaTrigger:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      EventSourceArn:
        Fn::ImportValue:
          !Sub "${SQSStack}:fifo-sqs-queue:arn"
      FunctionName: !Ref Lambda

  ApiGatewayPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref HttpApi
          - '/*'
  # </editor-fold>

  # <editor-fold desc="Role">
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Ref LambdaRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: !Ref LambdaPolicyName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "secretsmanager:GetSecretValue"
                Resource:
                  Fn::ImportValue: !Sub "${MysqlStack}:secret:arn"
              - Effect: "Allow"
                Action: "kms:Decrypt"
                Resource:
                  Fn::ImportValue: !Sub "${MysqlStack}:encryption-key:arn"
                Condition:
                  StringEquals:
                    kms:ViaService: "secretsmanager.us-east-2.amazonaws.com"
  # </editor-fold>

  # <editor-fold desc="Lambda">
  Lambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment:
        Variables:
          IS_PROD: !If [ IsProduction, true, false ]
          NODE_ENV: !If [ IsProduction, 'prod', 'dev' ]
          REGION: !Ref 'AWS::Region'
          NUMBER_OF_STACKED_LOGS: 10
          LOG_SEVERITY_LEVEL: DEBUG
          LOG_DEBUG_DEPTH_CONFIGURATION: 10
          DATABASE_HOST:
            Fn::ImportValue:
                !Sub "${MysqlStack}:rds-proxy:endpoint"
          DATABASE_SECRET_ARN:
            Fn::ImportValue:
                !Sub "${MysqlStack}:secret:arn"

      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key
      Handler: lambda.handler
      Timeout: 15
      MemorySize: 256
      TracingConfig:
        Mode: Active
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs14.x
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue:
              !Sub "${NetworkingStack}:public-security-group:id"
        SubnetIds:
          - Fn::ImportValue:
              !Sub "${NetworkingStack}:lambda-subnet-1:id"
          - Fn::ImportValue:
              !Sub "${NetworkingStack}:lambda-subnet-2:id"

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Lambda}"
      RetentionInDays: !If [ IsProduction, 14, 1 ]
  # </editor-fold>

Parameters:
  ApiName:
    Type: String
    Default: "pristine-bi-tool-api"
  LambdaRoleName:
    Type: String
    Default: "pristine-bi-tool-lambda-role"
  LambdaPolicyName:
    Type: String
    Default: "pristine-bi-tool-lambda-policy"
  IsProd:
    Type: String
    Default: "false"
  MysqlStack:
    Type: String
    Default: "pristine-bi-tool-mysql"
  NetworkingStack:
    Type: String
    Default: "pristine-bi-tool-networking"
  LambdaS3Key:
    Type: String
  LambdaS3Bucket:
    Type: String
  SQSStack:
    Type: String
    Default: "pristine-bi-tool-sqs"

Conditions:
  IsProduction: !Equals [ !Ref IsProd, true ]

Outputs:
  LambdaArn:
    Description: The arn of the lambda function
    Value: !GetAtt Lambda.Arn
    Export:
      Name: !Sub "${AWS::StackName}:lambda:arn"
  LambdaName:
    Description: The name of lambda function
    Value: !Ref Lambda
    Export:
      Name: !Sub "${AWS::StackName}:lambda:name"
